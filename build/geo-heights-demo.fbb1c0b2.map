{"version":3,"sources":["map.js","functions.js","index.js"],"names":["google","L","tileLayer","id","osm","map","Map","center","zoom","layers","baseLayers","control","undefined","position","collapsed","addTo","featureGroup","FeatureGroup","drawControl","Control","Draw","draw","polygon","rectangle","icon","DivIcon","iconSize","Point","className","polyline","circle","marker","circlemarker","edit","drawControlRemove","addControl","osmb","OSMBuildings","style","color","roofColor","shadows","exports","featuresListToCollection","list","polygonsWithInPolygon","polygons","withInPolygon","reduce","result","nextPolygon","coordinates","geometry","properties","turf","booleanWithin","push","findFeatureById","features","find","feature","setMapBounds","featureCollection","bbox","bboxPolygon","leafletPolygon","geoJSON","onEachFeature","layer","Util","setOptions","interactive","fill","fitBounds","getBounds","console","log","colors","house","material","roofMaterial","other","apartments","fs","require","rawdata","mytishi","JSON","parse","click","e","json","content","type","building_height","iou","popup","maxHeight","autoPanPaddingTopLeft","setLatLng","latLng","lat","lon","setContent","openOn","each","height","Object","assign","currentlLayer","on","Event","CREATED","event","toGeoJSON","set","error","removeLayer","addLayer"],"mappings":";AAAA;;ACAA0C,ADCA,IAAI1C,ICDI2C,KDCK1C,EAAEC,SAAF,CAAY,OCDzB,GAAmC,UAAC0C,IAAD,sCDCtB,EAA4E,EAAEzC,IAAI,CAAN,EAA5E,CAAb;ACDmC,ADCnC,IACIC,MAAMH,CCFoC,CDElCC,SAAF,CAAY,iDAAZ,EAA+D,EAAEC,IAAI,CAAN,EAA/D,CADV;ACAI,ADAJ,IAEIE,MAAM,IAAIJ,ECFF,ADEIK,GAAN,CAAU,KAAV,EAAiB,QCHmB;AAE1C,ADEIC,YAAQ,CAAC,OCFDqC,UDEA,EAAoB,gBAApB,CADW;ACHmB,ACA9C,AFKQpC,KCL2B,KDKrB,EAFa;ACHQ,ADM3BC,CCNR,WDMgB,CAACT,MAAD;AEHhB,AFA2B,CAAjB,CAFV;ACIA0C,QAAQG,qBAAR,GAAgC,UAACC,QAAD,EAAWC,aAAX;AAAA,ACKhC,AFDA,IAAIrC,OCHAoC,MDGa,GCHJE,MAAT,CAAgB,UAACC,MAAD,EAASC,WAAT,EAAyB;AAAA,ADIzC,YCHsBC,EDGZnD,MADG,GCH4B,GACekD,WADf,CAC/BE,QAD+B,CACnBD,WADmB;AAAA,ACL7CwB,AFUI,QEVIC,GAAR,AFUWxE,CCJ8BiD,ACN7B,UDKiC,GACeH,ACN5D,WDK6C,CACJG,UADI;AAAA,ADG5B,CAAjB,WCFqDlD,EADR,GACe+C,WADf,CACQ/C,EADR;AAErC,ACSR,AFJAF,EAAEU,EEIEkE,KFJJ,CAAUpE,GEIG,GFJb,CAAiBC,UAAjB,EAA6BE,SAA7B,EAAwC,EAAEC,UAAU,UAAZ,EAAwBC,WAAW,KAAnC,EAAxC,EAAoFC,KAApF,CAA0FV,GAA1F;AEKIyE,WAAO,EAAEC,UAAU,WAAZ,EAAyBC,cAAc,MAAvC,EADE;ADRL,ACUJC,AFJJ,IAAIjE,OEIO,CDVCM,CCUCyD,MFJM,GCNGzB,CCUC,AFJArD,EAAEgB,ECNEK,GCUhB,EAAqB0D,EDVV,CAAa7B,EDMhB,GAAqBpC,KAArB,CEI2B,AFJAV,CCNC,CAAZ,CAAb,ADMH,CAAnB,CCNmDgD,ECUxC,EAFE,MDRS,EAAyC,EAAElD,MAAF,EAAzC,CAAd;AACA,ACUJ+E,AFLJ,IACIhE,QCNQoC,ICUI,CDVCC,CCUCwB,AFJA,IAAI9E,EAAEkB,IEII,EDVhB,CAAmBG,ADMT,CAAUF,GEIhB,CFJE,CEImB4D,AFJA,CCNzB,EAA4BjC,WCUW,EDVvC,CAAJ,EAAgD,KCUxC;ADTJE,ACMC,AFAL5B,CEAR,SFAc,SCNKmC,IAAP,CAAYlC,OAAZ;AACH,ADMGA,iBAAS,KADP;ACJN,ACUR,AFJYC,IEIN4D,KAAKC,MDVInC,ECUI,EFJI,ECNf,ACUG,CAAX;ADTK,ACUL,AFJgBzB,IEIZ6D,CDlBA,EAQG,EARH,CAD4B,QDeV,IAAIpF,EAAEwB,OAAN,CAAc,2q7sJEIpC;ADnBgC,ACmBhC,AFHoBC,CChBpB,GCoBI4D,UAAUC,KAAKC,KAAL,CAAWH,CFJK,IAAIpF,EEIpB,AFJsB0B,CEGpC,IFH8B,CAAY,CAAZ,EAAe,CAAf,CADM;AAEhBC,2BAAW;ACL/Bc,ACUA,AFPoC,QCH5Be,KDGc,UCHtB,GAA0B,GCWtBpD,ODXuBqD,CCU3B,EAEI,KDZsB,EAAWvD,EAAX,gCCYGmF,OAAzB,CAFJ;ADV0B,ADEH,SAFT,ECCV5B,SAASC,IAAT,CAAc;AAAA,ACclBvB,AFPYP,UEOP4D,KDdwB7B,ACc7B,CAAW,EFPW,KCPezD,ADDvB,ECCe,CCcRuF,CAAV,EAAa,CDdoBvF,EAA1B;AAAA,ACedwE,AFPQ7C,KCRR,CADsB,MCgBd8C,GAAR,CAAYc,AFPI,CEOhB,IFhBU;ACAY,ACiBtB,AFPQ3D,CCVZ,OCiBQ4D,OAAO,CFPK,KAVN,0BEiBiBL,OAAhB,EAAyBI,EAAE9B,OAA3B,CAAX;AACA,AFPQ5B,QEOJ4D,UAAU,IFPQ,eEOWF,EAAE9B,OAArB,GAA+B,MAA7C;ADdJlB,ACeIkD,AFnBU,KADuB,GCK7B/B,OCeO,KDff,GAAuB,UAACxD,GAAD,EAAMyD,ACeS6B,KAAKtC,UAAL,CAAgBwC,CDf/B,EAA4B,CCe/C;ADdA,ACeAD,AFPI3D,QCRA8B,EDQM,KCRCT,ACeA,KDfKS,IAAL,CAAUD,eCee6B,EDfzB,CAAX,ECeyCtC,UAAL,CAAgByC,eAApD;ADdA,ACeAF,AFtBiC,CAAnB,CADlB,MCQQ5B,OCeO,ODfOV,KAAKU,UCeU2B,CDff,CAAiB5B,GCeGV,CDfpB,CAAlB,QCeiC,CAAgB0C,GAAjD;ADdA,ACeA9F,AFxBJ,IAiBIiC,EEOE8D,EDfE/B,GCeJ,CAAQ,EAAEgC,UFPU,CCRChG,ACeA,EDfEiE,CCef,AFPgBjE,EEOEiG,AFPA/E,ICRL,CAAU6C,EDQP,CAAU5C,IAAd,CAAmB,GCRlB,EAAuB,KCeK,CAAC,EAAD,EAAK,EAAL,CAAzC,EAAR,EACK+E,SADL,CACelG,EAAEmG,MAAF,CAASV,EAAEW,GAAX,EAAgBX,EAAEY,GAAlB,CADf,EAEKC,UAFL,CAEgBX,OAFhB,EAGKY,MAHL,CAGYnG,QAHZ;ADdI8D,ACkBP,AFVO9C,CEDR,SFCc,KAD6B,MCRK,yBAC1BuC,OAD0B,EACjBQ,KADiB,EACV;AAC1BnE,ADQJgC,UAAM,ICRAoC,IAAF,CAAOC,UAAP,CAAkBF,KAAlB,EAAyB;AACrBG,ACkBhBnC,AFVYH,UEUPwE,IAAL,AFVkB,CEUR,IFXI,MEWM7C,IDlBS,GCkBnB,CDnB2B,CCmBR;ADjBbY,ACiBa,AFTjBxD,sBCRU,KAFe,GCoBO4C,QAAQP,UADvB;ADhBbd,ACgBa,AFXf,QEYJsD,IADmB,WDhBN,YCiBbA,IADmB;ADnBQ,ACmBR,AFbc,CAAnB,CAjBxB,ME+BiCa,KDpBrB,CCmBiB,uBACbZ,eADa;ADdpB,ADQTzF,IAAI8B,UAAJ,CAAejB,WAAf;ACfgD,ACuB5C,KDvBqB,CAArB,ECuBI2E,QAAQhB,OAAOgB,IAAP,CAAZ,EAA0B;ADd1BxF,ACc0B,AFN9B,IAAI+B,ICRIqC,GDQG,IAAIpC,ECRX,CAAc4B,SCeuBY,AFP9B,CAAiBxE,GAAjB,CAAX,CCRiCqE,CCeemB,IAAP,CADX,GDdZ,EAAd;AACA5B,ACa0B,AFL9B7B,KAAKE,KAAL,CAAW,CEMGyC,ODdKhE,CCaW,IDb1B,CAAqBV,GAArB,QCcU0E,QADgB;ADZ7B,ACY6B,AFJ1BxC,CCtBJ,UDsBW,CEKayC,QFNb,IEKmB,gBACNA,YADM;AFH1BxC,eAAW,SAFJ;AEOHmE,AFJJlE,aAAS,EEIEmE,MAAP,CAAchD,OAAd,EAAuB;AACnBP,AFRD,CAAX,uBEQwB;AACRqD,8BADQ;AAER3B,AFJhBrC,QAAQrC,GAAR,GAAcA,GAAd,iBEEwB;AAGR2E,AFJhBtC,QAAQN,IAAR,GAAeA,IAAf;AECwB,AFAxBM,QAAQ1B,YAAR,GAAuBA,YAAvB;AED+B,AFE/B0B,QAAQxB,CEFA,UFER,GAAsBA,WAAtB;AEKK,AFJLwB,QAAQR,iBAAR,GAA4BA,iBAA5B;AEKC,CAZD;;AAcA,IAAI2E,sBAAJ;;AAEAxG,SAAIyG,EAAJ,CAAO7G,EAAEmB,IAAF,CAAO2F,KAAP,CAAaC,OAApB,EAA6B,UAAUC,KAAV,EAAiB;AAC1C,QAAI7C,QAAQ6C,MAAM7C,KAAlB;;AAEA,QAAI;AACA,YAAIrB,gBAAgBqB,MAAM8C,SAAN,EAApB;AACA,YAAIpE,WAAW,sCACXwC,OADW,EAEXvC,aAFW,CAAf;AAIAX,kBAAK+E,GAAL,CACI,yCAAyBrE,QAAzB,CADJ;AAGH,KATD,CASE,OAAOsE,KAAP,EAAc;AACZzC,gBAAQC,GAAR,CAAYwC,KAAZ;AACH;;AAGDnH,MAAEoE,IAAF,CAAOC,UAAP,CAAkBF,KAAlB,EAAyB,EAAEG,aAAa,IAAf,EAAqBC,MAAM,KAA3B,EAAzB;;AAEA,QAAIqC,aAAJ,EAAmB;AACf7F,0BAAaqG,WAAb,CAAyBR,aAAzB;AACH;;AAED7F,sBAAasG,QAAb,CAAsBlD,KAAtB;AACAyC,oBAAgBzC,KAAhB;AACH,CAzBD","file":"geo-heights-demo.fbb1c0b2.map","sourceRoot":"..","sourcesContent":["'use strict';\nvar google = L.tileLayer('http://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga', { id: 1 }),\n    osm = L.tileLayer('http://a.tile.openstreetmap.org/{z}/{x}/{y}.png', { id: 2 }),\n    map = new L.Map('map', {\n        center: [55.87835875564509, 37.7050219952363],\n        zoom: 16,\n        layers: [google]\n    });\n\nvar baseLayers = {\n    \"Google\": google,\n    \"OSM\": osm\n}\nL.control.layers(baseLayers, undefined, { position: 'topright', collapsed: false }).addTo(map);\n\nvar featureGroup = new L.FeatureGroup().addTo(map),\n    drawControl = new L.Control.Draw({\n        draw: {\n            polygon: false,\n            rectangle: {\n                icon: new L.DivIcon({\n                    iconSize: new L.Point(7, 7),\n                    className: 'point'\n                })\n            },\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n        },\n        edit: false\n    }),\n    drawControlRemove = new L.Control.Draw({\n        draw: false,\n        edit: {\n            edit: false,\n            featureGroup\n        }\n    });\nmap.addControl(drawControl);\n\nvar osmb = new OSMBuildings(map);\nosmb.style({\n    color: '#deebf4',\n    roofColor: '#828886',\n    shadows: true\n});\n\nexports.map = map;\nexports.osmb = osmb;\nexports.featureGroup = featureGroup;\nexports.drawControl = drawControl;\nexports.drawControlRemove = drawControlRemove;","exports.featuresListToCollection = (list) => ({\n    \"type\": \"FeatureCollection\",\n    \"features\": list\n});\n\nexports.polygonsWithInPolygon = (polygons, withInPolygon) => (\n    polygons.reduce((result, nextPolygon) => {\n        let { geometry: { coordinates }, properties, id } = nextPolygon\n        // use coordinates[0] because booleanWithin doesn't accept MultiPolygon\n        let polygon = turf.polygon(coordinates[0], properties, { id })\n        if (turf.booleanWithin(polygon, withInPolygon)) {\n            result.push(polygon);\n        }\n        return result\n    }, [])\n);\n\nexports.findFeatureById = (features, id) => (\n    features.find(feature => feature.id === id)\n)\n\nexports.setMapBounds = (map, featureCollection) => {\n    var bbox = turf.bbox(featureCollection);\n    var bboxPolygon = turf.bboxPolygon(bbox);\n    var leafletPolygon = L.geoJSON(bboxPolygon, {\n        onEachFeature(feature, layer) {\n            L.Util.setOptions(layer, { \n                interactive: true,\n                fill: false,\n                color: \"#ffffff\"\n            });\n        }\n    })\n    map.fitBounds(leafletPolygon.getBounds());\n    leafletPolygon.addTo(map);\n}","'use strict';\nconsole.log('Hell world!');\n\nimport {\n    map,\n    osmb,\n    featureGroup,\n    drawControl,\n    drawControlRemove\n} from './map';\nimport {\n    setMapBounds,\n    findFeatureById,\n    polygonsWithInPolygon,\n    featuresListToCollection\n} from './functions';\n\nvar colors = {\n    house: { material: \"tar_paper\", roofMaterial: \"wood\" },\n    other: { material: \"brick\", roofMaterial: \"stone\" },\n    apartments: { material: \"panel\", roofMaterial: \"concrete\" }\n}\n\nconst fs = require('fs');\nvar rawdata = fs.readFileSync('./data/mytishi.geojson', 'utf8'),\n    mytishi = JSON.parse(rawdata);\n\nsetMapBounds(\n    map,\n    featuresListToCollection(mytishi)\n)\n\nosmb.click(function (e) {\n    console.log(e);\n    var json = findFeatureById(mytishi, e.feature);\n    var content = '<b>FEATURE ID ' + e.feature + '</b>';\n    content += '<br><em>Type</em> ' + json.properties.type;\n    content += '<br><em>Height</em> ' + json.properties.building_height;\n    content += '<br><em>IOU</em> ' + json.properties.iou;\n    L.popup({ maxHeight: 200, autoPanPaddingTopLeft: [50, 50] })\n        .setLatLng(L.latLng(e.lat, e.lon))\n        .setContent(content)\n        .openOn(map);\n});\n\nosmb.each(function (feature) {\n    let { type, building_height: height } = feature.properties;\n    if (type && colors[type]) {\n        let { material, roofMaterial } = colors[type];\n        Object.assign(feature, {\n            properties: {\n                height,\n                material,\n                roofMaterial\n            }\n        });\n    };\n});\n\nlet currentlLayer\n\nmap.on(L.Draw.Event.CREATED, function (event) {\n    var layer = event.layer;\n\n    try {\n        var withInPolygon = layer.toGeoJSON()\n        var polygons = polygonsWithInPolygon(\n            mytishi,\n            withInPolygon\n        );\n        osmb.set(\n            featuresListToCollection(polygons)\n        )\n    } catch (error) {\n        console.log(error);\n    }\n\n\n    L.Util.setOptions(layer, { interactive: true, fill: false });\n\n    if (currentlLayer) {\n        featureGroup.removeLayer(currentlLayer);\n    };\n\n    featureGroup.addLayer(layer);\n    currentlLayer = layer;\n});"]}