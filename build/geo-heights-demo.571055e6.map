{"version":3,"sources":["map.js","functions.js","index.js"],"names":["map","L","Map","setView","TileLayer","maxZoom","maxNativeZoom","addTo","osmb","OSMBuildings","style","color","roofColor","shadows","exports","featuresListToCollection","list","polygonsWithInPolygon","polygons","withInPolygon","reduce","result","nextPolygon","coordinates","geometry","properties","id","polygon","turf","booleanWithin","push","findFeatureById","features","find","feature","console","log","fs","require","rawdata","mytishi","JSON","parse","set","click","e","json","content","height","iou","popup","maxHeight","autoPanPaddingTopLeft","setLatLng","latLng","lat","lon","setContent","openOn"],"mappings":";AAAA,IAAIA,MAAM,IAAIC,EAAEC,GAAN,CAAU,KAAV,CAAV;AACAF,IAAIG,OAAJ,CAAY,CAAC,iBAAD,EAAoB,gBAApB,CAAZ,EAAmD,EAAnD,EAAuD,KAAvD;ACDAW,QAAQC,wBAAR,GAAmC,UAACC,IAAD;AAAA,ADGnC,IAAIf,EAAEG,KCHwC,IDG9C,CAAgB,8DAAhB,EAAgF;ACF5E,ADGFC,WAAS,EADqE,GCFpE,mBADkC;AAE1C,ADGFC,iBAAe,GCHDU;AAF8B,ACA9C,AFGgF,CAAhF,EAGGT,ECNgC,GDGnC,CAGSP,GAHT;ACHmC,CAAnC;ACGA,AFKA,IAAIQ,OAAO,IAAIC,YAAJ,CAAiBT,GAAjB,CAAX;ACHAc,ADIAN,KAAKE,GCJGO,EDIR,CAAW,kBCJX,GAAgC,UAACC,QAAD,EAAWC,aAAX;AAAA,ACAhC,AFKER,SAAO,ECJLO,ODGO,ECHEE,MAAT,CAAgB,UAACC,MAAD,EAASC,WAAT,EAAyB;AAAA,ADK3CV,YCJwBW,CDIb,SAFF,CCHkC,GACeD,WADf,CAC/BE,QAD+B,CACnBD,WADmB;AAAA,ACL7CY,AFWEtB,QEXMuB,GAAR,AFWW,CCL8BX,ACN7B,UDKiC,GACeH,ACN5D,WDK6C,CACJG,UADI;AAAA,ADGlC,CAAX,WCFqDC,EADR,GACeJ,WADf,CACQI,EADR;AAErC,ACGR,IAAMW,KAAKC,QAAQ,IAAR,CAAX;AACA,AFGAxB,IEHIyB,IFGIvC,GAAR,GAAcA,GAAd,2ziwWEHA;ADHQ,ACIR,AFGAc,IEHI0B,IFGIhC,ICPImB,ADOZ,EEHcc,CFGCjC,IEHIkC,AFGnB,GCPsBd,ECIR,CAAWW,EDJEZ,KCIb,CAAd,CDJsB,CAAaJ,YAAY,CAAZ,CAAb,EAA6BE,UAA7B,EAAyC,EAAEC,MAAF,EAAzC,CAAd;AACA,YAAIE,KAAKC,aAAL,CAAmBF,OAAnB,EAA4BR,aAA5B,CAAJ,EAAgD;AAC5CE,ACIZb,UAAKmC,GAAL,CACI,KDLeb,IAAP,CAAYH,OAAZ,wBCKiBa,OAAzB,CADJ;ADHS;AACD,ACMRhC,UAAKoC,KDNUvB,ACMf,CAAW,KDNH,KCMawB,CAAV,EAAa;ADLnB,ACMDV,KDdA,EAQG,EARH,CAD4B,ECepBC,GAAR,CAAYS,CAAZ;ADf4B,ACgB5B,CDhBJ,OCgBQC,OAAO,gCAAgBN,OAAhB,EAAyBK,EAAEX,OAA3B,CAAX;AACA,QAAIa,UAAU,mBAAkBF,EAAEX,OAApB,GAA6B,MAA3C;ADLJpB,ACMIiC,QDNIhB,OCMO,QDNf,GAA0B,UAACC,ICMYc,IDNb,CCMkBrB,CDNPC,EAAX,OCMa,CAAgBsB,MAAnD;ADNsB,ACOtBD,WDNAf,ICMW,KDNFC,IAAT,CAAc,YCMkBa,KAAKrB,UAAL,CAAgBwB,GAAhD;ADNc,ACOdhD,MAAEiD,KAAF,CAAQ,EAAEC,CDPejB,QAAQR,EAAR,ACOL,GAAZ,EDPgCA,ACOf0B,EDPX,qBCOiC,CAAC,EAAD,EAAI,EAAJ,CAAvC,EAAR,EACGC,SADH,CACapD,EAAEqD,MAAF,CAAST,EAAEU,GAAX,EAAgBV,EAAEW,GAAlB,CADb,EAEGC,UAFH,CAEcV,OAFd,EAGGW,MAHH,CAGU1D,QAHV;ADPc,ACWjB,CAVD,IDDI,CADsB;AAAA,CAA1B","file":"geo-heights-demo.571055e6.map","sourceRoot":"..","sourcesContent":["var map = new L.Map('map');\nmap.setView([55.87835875564509, 37.7050219952363], 16, false);\n\nnew L.TileLayer('http://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga', {\n  maxZoom: 18,\n  maxNativeZoom: 22\n}).addTo(map);\n\nvar osmb = new OSMBuildings(map);\nosmb.style({\n  color: '#deebf4',\n  roofColor: '#828886',\n  shadows: true\n});\n\nexports.map = map;\nexports.osmb = osmb;","exports.featuresListToCollection = (list) => ({\n    \"type\": \"FeatureCollection\",\n    \"features\": list\n});\n\nexports.polygonsWithInPolygon = (polygons, withInPolygon) => (\n    polygons.reduce((result, nextPolygon) => {\n        let { geometry: { coordinates }, properties, id } = nextPolygon\n        // use coordinates[0] because booleanWithin doesn't accept MultiPolygon\n        let polygon = turf.polygon(coordinates[0], properties, { id })\n        if (turf.booleanWithin(polygon, withInPolygon)) {\n            result.push(polygon);\n        }\n        return result\n    }, [])\n);\n\nexports.findFeatureById = (features, id) => (\n    features.find(feature => feature.id === id)\n)","'use strict';\nconsole.log('Hell world!');\n\nimport { map } from './map';\nimport { osmb } from './map';\nimport {\n    findFeatureById,\n    polygonsWithInPolygon,\n    featuresListToCollection\n} from './functions';\n\nconst fs = require('fs');\nvar rawdata = fs.readFileSync('./data/mytishi.geojson', 'utf8');\nvar mytishi = JSON.parse(rawdata);\n\nosmb.set(\n    featuresListToCollection(mytishi)\n);\n\nosmb.click(function (e) {\n    console.log(e);\n    var json = findFeatureById(mytishi, e.feature);\n    var content = '<b>FEATURE ID '+ e.feature +'</b>';\n    content += '<br><em>Height</em> '+ json.properties.height;\n    content += '<br><em>IOU</em> '+ json.properties.iou;\n    L.popup({ maxHeight:200, autoPanPaddingTopLeft:[50,50] })\n      .setLatLng(L.latLng(e.lat, e.lon))\n      .setContent(content)\n      .openOn(map);\n});"]}